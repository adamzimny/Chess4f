/*
   Copyright (C) 2015 Adam Zimny (adamzimny@gmail.com)
   This file is part of Chess4f.

    Chess4f is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Chess4f is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Chess4f.  If not, see <http://www.gnu.org/licenses/>.
 */
package chess4f.ui;

import chess4f.game.GameController;
import chess4f.domain.ChessBoard;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Formatter;
import java.util.logging.Handler;
import java.util.logging.LogRecord;
import java.util.logging.Logger;

/**
 *
 * @author Adam Zimny <adamzimny@gmail.com>
 */
public class BoardFrame extends javax.swing.JFrame {

    private final GameController gameController;

    /**
     * Creates new form BoardFrame
     */
    public BoardFrame() {
        initComponents();
        setTitle("Chess4f");
        setupLogging();
        ChessBoard board = new ChessBoard();
        board.resetPieces();
        // white loosing
        //ChessBoard board = FileReader.readBoard("src/resources/boards/king_vs_two_rooks.brd");
        // black loosing
        //ChessBoard board = FileReader.readBoard("src/resources/boards/two_rooks_vs_king.brd");
        //ChessBoard board = FileReader.readBoard("src/resources/boards/board_test_1.brd");
        //ChessBoard board = FileReader.readBoard("src/resources/boards/board_test_2.brd");
        //ChessBoard board = FileReader.readBoard("src/resources/boards/king_vs_rook.brd");

        gameController = new GameController(GameController.GameMode.HUMAN_VS_AI, board);
        BoardPanel bp = (BoardPanel) boardPanel;
        bp.setBoard(board);
        bp.setGameController(gameController);

        gameController.setMoveListener((move) -> {
            moveLabel.setText(move.getWhat().getColor().opponent().name());
            bp.onMove(move);
        });

        gameController.setEndOfGameListener((color) -> {
            if (color != null) {
                gameStatusLabel.setText(color.name() + " won");
            } else {
                gameStatusLabel.setText("Stallmate");
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardFramePanel = new javax.swing.JPanel();
        boardPanel = new BoardPanel();
        buttonsPanel = new javax.swing.JPanel();
        undoMoveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        moveLabel = new javax.swing.JLabel();
        gameStatusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        boardFramePanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 605, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout boardFramePanelLayout = new javax.swing.GroupLayout(boardFramePanel);
        boardFramePanel.setLayout(boardFramePanelLayout);
        boardFramePanelLayout.setHorizontalGroup(
            boardFramePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boardFramePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        boardFramePanelLayout.setVerticalGroup(
            boardFramePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boardFramePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        buttonsPanel.setFocusable(false);

        undoMoveButton.setText("Undo move");
        undoMoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMoveButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Next move:");

        moveLabel.setText("WHITE");

        gameStatusLabel.setText("           ");

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(undoMoveButton)
                    .addComponent(jLabel1)
                    .addComponent(moveLabel)
                    .addComponent(gameStatusLabel))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(undoMoveButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveLabel)
                .addGap(24, 24, 24)
                .addComponent(gameStatusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardFramePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boardFramePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void undoMoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMoveButtonActionPerformed
        gameController.undo();
        this.repaint();
    }//GEN-LAST:event_undoMoveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BoardFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardFramePanel;
    private javax.swing.JPanel boardPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JLabel gameStatusLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel moveLabel;
    private javax.swing.JButton undoMoveButton;
    // End of variables declaration//GEN-END:variables

    private void setupLogging() {
        // get the global logger to configure it
        Logger rootLogger = Logger.getLogger("");

        Handler[] handlers = rootLogger.getHandlers();

        Formatter fmt = new Formatter() {

            @Override
            public String format(LogRecord record) {
                return record.getLoggerName() + ": " + record.getMessage() + "\n";
            }
        };

        if (handlers[0] instanceof ConsoleHandler) {

            ConsoleHandler ch = (ConsoleHandler) handlers[0];
            ch.setFormatter(fmt);
        }
        try {
            FileHandler fileHandler = new FileHandler("chess.log");
            fileHandler.setFormatter(fmt);
            rootLogger.addHandler(fileHandler);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}
